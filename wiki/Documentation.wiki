#summary Quick view of the different features

= Introduction =

The program handles only one image at a time.
First open an image by clicking "File -> Open Image"


= Features =


== LSB Enhancement ==

The most famous visual attack, described in :

_[http://simple-steganalysis-suite.googlecode.com/svn/wiki/articles/Attacks_on_Steganographic_Systems.pdf Attacks on Steganographic Systems by Andreas Westfeld and Andreas Pfitzmann]_

Just extract the LSB of each pixel (or LSB of red, green and blue value for RGB images).

 * If LSB = 1 then set pixel (or color value) to 255
 * If LSB = 0 then set pixel (or color value) to 0

http://simple-steganalysis-suite.googlecode.com/svn/wiki/images/lena512.jpg

Stego image

http://simple-steganalysis-suite.googlecode.com/svn/wiki/images/lena_lsb.png

LSB Enhancement result



== Chi-Square Attack ==

The most famous statistical attack, described in :

_[http://simple-steganalysis-suite.googlecode.com/svn/wiki/articles/Attacks_on_Steganographic_Systems.pdf Attacks on Steganographic Systems by Andreas Westfeld and Andreas Pfitzmann]_

http://simple-steganalysis-suite.googlecode.com/svn/wiki/images/lsbEnhancement.png

Stego image(left)and LSB Enhancement result (right)

http://simple-steganalysis-suite.googlecode.com/svn/wiki/images/chiSquare.png

Chi-Square attack from bottom to top



== Neighbourhood Histogram ==

Let us consider a normal RGB image. Each pixel has 3 components : red, green and blue. There are (2^8  `*`  2^8  `*` 2^8 = 2^24) = 16.7M
possible colors. A true image does not contain all possible colors, this would require at least 16.7M pixels.

The difference between 2 adjacent pixels will most likely be more than +/- 1, even if many pixels have the same color.

Let denote pixel p1(r,g,b) and pixel p2(r+/-1, g+/-1, b+/-1). These pixels are called "neighbours". A normal image contains 4-5 neighbours colours for each pixel on average. LSB embedding produces up to 7 neighbours colours for every colours in the image. Some steganographic techniques increment or decrement LSB, producing up to 26 neighbours for each modified pixel :

||(r − 1, g − 1, b − 1)||(r, g − 1, b − 1)||(r + 1,   g − 1,   b − 1)||
||(r − 1, g − 1, b)    ||(r, g − 1, b)    ||(r + 1,   g − 1,   b)    ||
||(r − 1, g − 1, b + 1)||(r, g − 1, b + 1)||(r + 1,   g − 1,   b + 1)||
||(r − 1, g,     b − 1)||(r, g,     b − 1)||(r + 1,   g,       b − 1)||
||(r − 1, g,     b)    || *(r, g, b)*     ||(r + 1,   g,       b)    ||
||(r − 1, g,     b + 1)||(r, g,     b + 1)||(r + 1,   g,       b + 1)||
||(r − 1, g + 1, b − 1)||(r, g + 1, b − 1)||(r + 1,   g + 1,   b − 1)||
||(r − 1, g + 1, b)    ||(r, g + 1, b)    ||(r + 1,   g + 1,   b)    ||
||(r − 1, g + 1, b + 1)||(r, g + 1, b + 1)||(r + 1,   g + 1,   b + 1)||

http://simple-steganalysis-suite.googlecode.com/svn/wiki/images/neighbourhood.png

Neighbourhood histogram of a normal image (top) and steganogram with 40 KB embedded (bottom)

Source : _[http://simple-steganalysis-suite.googlecode.com/svn/wiki/articles/Detecting_Low_Embedding_Rates.pdf Detecting Low Embedding Rates by Andreas Westfeld]_


== Pixel Difference Histogram ==


== Primary Sets ==